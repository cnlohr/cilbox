
How do you save the scene appropriately?
/*
			This does not work >:(

			UnityEditor.SceneManagement.EditorSceneManager.MarkSceneDirty(
				UnityEngine.SceneManagement.SceneManager.GetActiveScene() );

			object[] objToCheck = GameObject.FindObjectsByType<GameObject>( FindObjectsSortMode.None );
			foreach (object o in objToCheck)
			{
				GameObject g = (GameObject) o;
				EditorUtility.SetDirty( g );
			}
			UnityEditor.SceneManagement.EditorSceneManager.SaveScene( UnityEngine.SceneManagement.SceneManager.GetActiveScene() );
			AssetDatabase.ImportAsset(UnityEngine.SceneManagement.SceneManager.GetActiveScene().path, ImportAssetOptions.ForceUpdate);
*/






		public int FindInternalMetadataID( String soruceName, MetaTokenType type, String name )
		{
			int i;
			for( i = 0; i < metadatas.Length; i++ )
			{
				CilMetadataTokenInfo ci = metadatas[i];
				if( ci.type == type && ci.fields.Length > 1 && ci.fields[1] == name )
					return i;
			}
			return -1;
		}



// Original way to get type names, current way is probably sufficient.
		/*
		public static Type GetNativeTypeFromName( String useAssembly, String typeName, bool forceBaseType = false )
		{
			String truncType = typeName;
			String [] truncTypeSet = typeName.Split('[');
			bool bGeneric = false;
			Type[] genericArray = null;
			if( truncTypeSet.Length > 1 )
			{
				truncType = truncTypeSet[0];
				String [] genericList = truncTypeSet[1].Split(']')[0].Split(',');

				genericArray = new Type[genericList.Length];
				int gen;
				for( gen = 0; gen < genericList.Length; gen++ )
				{
					Type t = GetNativeTypeFromName( useAssembly, genericList[gen] );
					if( t == null ) return null;
					genericArray[gen] = t;
				}

				bGeneric = true;
			}

			foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				if( assembly.GetName().Name != useAssembly ) continue;
				var tt = assembly.GetTypes();
				foreach( Type lt in tt )
				{
					if( lt.FullName == truncType )
					{
						if( bGeneric && !forceBaseType )
						{
							return lt.MakeGenericType( genericArray );
						}
						else
						{
							return lt;
						}
					}
				}
			}
			return null;
		}
		*/




			/* Test
			Debug.Log( CilboxUtil.SerializeDict( classes ) );
			OrderedDictionary classTest = CilboxUtil.DeserializeDict( sAllAssemblyData );
			foreach( DictionaryEntry v in classTest )
			{
				Debug.Log( "CLASS" + v.Key + "=" + v.Value );
				OrderedDictionary testClassProps = CilboxUtil.DeserializeDict( v.Value );
				foreach( DictionaryEntry ve in testClassProps )
				{
					Debug.Log( "PROPS" + ve.Key + "=" + ve.Value );
					OrderedDictionary testClassPropsMethods = CilboxUtil.DeserializeDict( ve.Value );
					foreach( DictionaryEntry vee in testClassPropsMethods )
					{
						Debug.Log( "METHOD" + vee.Key + "=" + vee.Value );
					}
				}
			} */


			/*
			OrderedDictionary strings = new OrderedDictionary();
			// 256 ^ 3 - 1 = max value of a 3-byte uint.
			// start at 1 since 0 is always not found.
			for (int i = 1; i < (256 * 256 * 256); i++)
			{
				try
				{
					int tok = 0x70_000000 | i;
					String str = proxyAssembly.ManifestModule.ResolveString(tok);
					// Debug.Log("String Found: " + str + " At: " + tok.ToString("X8"));
					strings[tok.ToString()] = str;
				}
				catch (Exception) // end of valid strings
				{
					break;
				}
			}
			*/





